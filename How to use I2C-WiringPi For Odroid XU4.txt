/*
Author: Issa G Malke
Date: Nov. 10, 2016
*/

#include "wiringPiI2C.h"	//library for using I2C with WiringPi
#include <unistd.h>			//Needed for I2C port
#include <fcntl.h>			//Needed for I2C port
#include <sys/ioctl.h>		//Needed for I2C port
#include <linux/i2c-dev.h>	//Needed for I2C port



//===========| Arduino Addr. |===========


int tempAddress= 0x05;		//arduino is at address 0x05
int sMotorAddress= 0x06;	//arduino is at address 0x06


//=============| initi. wiringPi I2C-Arduino addr. |=============

	int arduinoWrite = wiringPiI2CSetup(sMotorAddress);	//Write to I2C
	int arduinoWriteII = wiringPiI2CSetup(tempAddress);	//Write to I2C
	int arduinoRead = wiringPiI2CSetup(tempAddress);	//Read from I2C
	
	int length = 3;					//Number of bytes to read
	unsigned char buffer[3] = {0};	//Buffer to store the Received Bytes

	int lengthII = 7;				//Number of bytes to read
	char bufferII[7] = {0};			//Buffer to store the Received Bytes	
	
	
//=============| wiringPi I2C-Arduino-READ BUFFER|=============
	
	if (read(arduinoRead, buffer, length) != length){			
		
		ROS_INFO("Failed to read from the i2c bus.\n");	//ERROR HANDLING: i2c transaction failed
		}

	 else {
		ROS_INFO("Data read: %s\n", buffer);		//To print the received bytes "char" in /rosout topic
		}
  
  
  
//=============| wiringPi I2C-Arduino-WRITE BUFFER|=============  

  	buffer[0] = (*Direction);
	buffer[1] = (*Speed);
	buffer[2] = (*steps);
	buffer[3] = (*stop);
	
  if (write(arduinoWrite, buffer, length) != length){
		
	ROS_INFO("Failed to write to the i2c bus.\n");	//ERROR HANDLING: i2c transaction failed
  }
  
//=============| wiringPi I2C-Arduino-WRITE ONE VALUE|=============  
  
  wiringPiI2CWrite(arduinoWriteII,0x01);	// WRITE "1"
  
  
//=============| INSIDE MAIN() wiringPi I2C-Arduino-CHECK CONNECTION|=============  
 
  if (arduinoWrite == -1 || arduinoRead == -1){
		ROS_INFO("Error: Could not connect to Arduino!");
	} 
  
  
  
  
  
  
  